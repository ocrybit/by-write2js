// Generated by CoffeeScript 1.3.3
(function() {
  var ByWrite2JS, EventEmitter, coffee, colors, fs, minimatch, path, util, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  coffee = require('coffee-script');

  EventEmitter = require('events').EventEmitter;

  colors = require('colors');

  path = require('path');

  util = require('util');

  _ = require('underscore');

  minimatch = require('minimatch');

  module.exports = ByWrite2JS = (function(_super) {

    __extends(ByWrite2JS, _super);

    function ByWrite2JS(opts) {
      var _base, _base1, _ref, _ref1, _ref2, _ref3, _ref4;
      this.opts = opts != null ? opts : {};
      this.mapper = (_ref = (_ref1 = this.opts) != null ? _ref1.mapper : void 0) != null ? _ref : {};
      if ((_ref2 = (_base = this.opts).bin) == null) {
        _base.bin = false;
      }
      if ((_ref3 = (_base1 = this.opts).binDir) == null) {
        _base1.binDir = "" + this.opts.root + "/bin";
      }
      this.noWriteFiles = [];
      if (((_ref4 = this.opts) != null ? _ref4.noWrite : void 0) != null) {
        this._setNoWriteFiles(this.opts.noWrite);
      }
    }

    ByWrite2JS.prototype._setListeners = function(bystander) {
      var _this = this;
      this.bystander = bystander;
      this.bystander.by.coffeescript.on('compiled', function(data) {
        if (!_this._isNoWrite(data.file)) {
          data.jsfile = _this._getJSPath(data.file, _this.mapper);
          return _this._writeJS(data);
        }
      });
      return this.bystander.by.coffeescript.on('coffee removed', function(file) {
        var jsfile;
        if (!_this._isNoWrite(file)) {
          jsfile = _this._getJSPath(file, _this.mapper);
          return _this.rmJS({
            file: file,
            jsfile: jsfile
          });
        }
      });
    };

    ByWrite2JS.prototype._setNoWriteFiles = function(newFiles) {
      return this.noWriteFiles = _(this.noWriteFiles).union(newFiles);
    };

    ByWrite2JS.prototype._isNoWrite = function(file) {
      var v, _i, _len, _ref;
      _ref = this.noWriteFiles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        if (minimatch(file, v, {
          dot: true
        })) {
          return true;
        }
      }
      return false;
    };

    ByWrite2JS.prototype._replaceExt = function(txt, ext) {
      if (ext == null) {
        ext = 'js';
      }
      return txt.replace(/\.coffee$/, "." + ext);
    };

    ByWrite2JS.prototype._getJSPath = function(csfile, mapper) {
      var basename, dirdir, dirname, filebase, k, m, v;
      if (mapper == null) {
        mapper = {};
      }
      filebase = path.basename(csfile);
      dirname = path.dirname(csfile);
      dirdir = path.dirname(dirname);
      basename = path.basename(dirname);
      if (this.opts.bin && filebase.match(/\.bin\.coffee$/i) !== null) {
        return ("" + this.opts.binDir + "/") + filebase.replace(/\.bin\.coffee$/i, '');
      }
      if (typeof mapper === 'object' && !util.isArray(mapper)) {
        for (k in mapper) {
          v = mapper[k];
          try {
            m = minimatch(csfile, k);
            if (m) {
              if (util.isArray(v)) {
                return this._replaceExt(path.normalize(csfile.replace(v[0], v[1])));
              } else if (typeof v === 'function') {
                return this._replaceExt(path.normalize(v(csfile)));
              }
            }
          } catch (e) {

          }
        }
      }
      return ("" + dirname + "/") + this._replaceExt(filebase);
    };

    ByWrite2JS.prototype._writeJS = function(data) {
      var version,
        _this = this;
      version = '// Generated by CoffeeScript ' + coffee.VERSION;
      if (this.opts.bin && data.file.match(/\.bin\.coffee$/i) !== null) {
        version = '#!/usr/bin/env node';
      }
      return fs.writeFile(data.jsfile, [version, data.compiled].join('\n'), function(err) {
        return _this._emitter(err, data);
      });
    };

    ByWrite2JS.prototype._emitter = function(writeErr, data) {
      if (writeErr) {
        return this._emitWriteError(writeErr, data);
      } else {
        return this._emitWrote(data);
      }
    };

    ByWrite2JS.prototype._emitWrote = function(data) {
      this.emit('wrote2js', {
        file: data.file,
        jsfile: data.jsfile,
        compiled: data.compiled,
        code: data.code
      });
      if (!this.opts.nolog) {
        return console.log(("" + data.file + " => " + data.jsfile).grey + '\n');
      }
    };

    ByWrite2JS.prototype._emitWriteError = function(err, data) {
      var message;
      message = ['fail to write js file'.yellow, " - " + data.file, " -> " + data.jsfile];
      if (!this.opts.nolog) {
        console.log(message.join(''), '\n');
      }
      return this.emit('write2js error', {
        file: data.file,
        jsfile: data.jsfile,
        err: err,
        compiled: data.compiled,
        code: data.code
      });
    };

    ByWrite2JS.prototype.rmJS = function(data) {
      var _this = this;
      return fs.unlink(data.jsfile, function(err) {
        if (err) {
          return _this.emit('unlink error', {
            file: data.file,
            jsfile: data.jsfile,
            err: err
          });
        } else {
          return _this.emit('js removed', data);
        }
      });
    };

    return ByWrite2JS;

  })(EventEmitter);

}).call(this);
